<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>枫秀学习日志</title>
  <icon>http://fengxiu.club/icon.png</icon>
  <subtitle>枫秀学习日志</subtitle>
  <link href="http://fengxiu.club/atom.xml" rel="self"/>
  
  <link href="http://fengxiu.club/"/>
  <updated>2023-03-06T21:36:39.000Z</updated>
  <id>http://fengxiu.club/</id>
  
  <author>
    <name>枫秀</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>02 sentinel原理-SPI扩展点</title>
    <link href="http://fengxiu.club/archives/17382.html"/>
    <id>http://fengxiu.club/archives/17382.html</id>
    <published>2023-03-06T21:36:35.000Z</published>
    <updated>2023-03-06T21:36:39.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;前面一篇文章多次讲到SPI机制，本篇文章主要介绍下sentinel中使用到的SPI。如果对SPI不太懂，可以参考这篇文章&lt;/p&gt;
&lt;p&gt;在sentinel-core模块的resources资源目录下，有一个 META-INF&amp;#x2F;services 目录，该目录下定义了sentinel的SPI扩展点，目前有以下三个，同时实现了自定义的SPI加载器SpiLoader，下面的扩展点都是使用这个加载器进行加载。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;com.alibaba.csp.sentinel.init.InitFunc：用于配置InitFunc接口的实现类&lt;/li&gt;
&lt;li&gt;com.alibaba.csp.sentinel.slotchain.SlotChainBuilder文件用于配置 SlotChainBuilder 接口的实现类&lt;/li&gt;
&lt;li&gt;com.alibaba.csp.sentinel.slotchain.ProcessorSlot：用于配置使用到的ProcessorSlot&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="限流" scheme="http://fengxiu.club/categories/%E9%99%90%E6%B5%81/"/>
    
    
    <category term="sentinel" scheme="http://fengxiu.club/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>01 sentinel简介</title>
    <link href="http://fengxiu.club/archives/44592.html"/>
    <id>http://fengxiu.club/archives/44592.html</id>
    <published>2023-03-06T21:36:25.000Z</published>
    <updated>2023-03-06T21:36:30.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://sentinelguard.io/zh-cn/index.html&quot;&gt;Sentinel&lt;/a&gt;是阿里中间件团队开源的，面向分布式服务架构的轻量级高可用流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户保护服务的稳定性。&lt;/p&gt;
&lt;p&gt;本文从一个简单的例子介绍如何使用sentinel，然后对链路进行简单的介绍，为后面的原理分析做个铺垫。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    entry = SphU.entry(&lt;span class=&quot;string&quot;&gt;&amp;quot;demo1&amp;quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//（1）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 被保护的业务逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do something...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (BlockException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 资源访问阻止后的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (entry != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        entry.exit();&lt;span class=&quot;comment&quot;&gt;//（3）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是一个很普通的例子，不过已经足以说明sentinel的流程，主要做了以下三件事&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义资源：资源是Sentinel的关键概念。它可以是Java应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。&lt;/li&gt;
&lt;li&gt;当资源访问被阻止后，进行处理&lt;/li&gt;
&lt;li&gt;退出限流 &lt;code&gt;entry.exit()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="限流" scheme="http://fengxiu.club/categories/%E9%99%90%E6%B5%81/"/>
    
    
    <category term="sentinel" scheme="http://fengxiu.club/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="http://fengxiu.club/archives/f7de8aa8.html"/>
    <id>http://fengxiu.club/archives/f7de8aa8.html</id>
    <published>2021-08-28T10:09:53.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;p&gt;外观模式是一种结构型设计模式， 能为程序库、 框架或其他复杂类提供一个简单的接口。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;假设你必须在代码中使用某个复杂的库或框架中的众多对象。 正常情况下， 你需要负责所有对象的初始化工作、 管理其依赖关系并按正确的顺序执行方法等。&lt;/p&gt;
&lt;p&gt;最终， 程序中类的业务逻辑将与第三方类的实现细节紧密耦合， 使得理解和维护代码的工作很难进行。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://fengxiu.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://fengxiu.club/archives/f5c535ea.html"/>
    <id>http://fengxiu.club/archives/f5c535ea.html</id>
    <published>2021-08-28T10:09:53.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h1&gt;&lt;p&gt;适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。&lt;/p&gt;
&lt;p&gt;在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/fengxiu/img/problem-zh-2x.png&quot; alt=&quot;problem-zh-2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以修改程序库来支持 XML。 但是， 这可能需要修改部分依赖该程序库的现有代码。 甚至还有更糟糕的情况， 你可能根本没有程序库的源代码， 从而无法对其进行修改。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://fengxiu.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>腾讯TEG面经：java实习岗</title>
    <link href="http://fengxiu.club/archives/52bb366.html"/>
    <id>http://fengxiu.club/archives/52bb366.html</id>
    <published>2019-04-02T10:49:22.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下面记录的是我面腾讯TEG事业群的经历&lt;/p&gt;
&lt;h2 id=&quot;腾讯一面-2019年03月13日&quot;&gt;&lt;a href=&quot;#腾讯一面-2019年03月13日&quot; class=&quot;headerlink&quot; title=&quot;腾讯一面 2019年03月13日&quot;&gt;&lt;/a&gt;腾讯一面</summary>
        
      
    
    
    
    <category term="面试" scheme="http://fengxiu.club/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里春招实习面经：java开发</title>
    <link href="http://fengxiu.club/archives/8650cc91.html"/>
    <id>http://fengxiu.club/archives/8650cc91.html</id>
    <published>2019-04-02T11:27:29.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先说一下，你们可能看到我的面经也会觉得很惊奇，为什么其他面经里面出现的问题，我这里几乎都没出现，而且面试流程也走的这么快。下面就看一下我的阿里春招面试奇葩之旅。&lt;/p&gt;
&lt;h2 id=&quot;阿里一面-2019年03月28日&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="面试" scheme="http://fengxiu.club/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP 管道化(pipeline)</title>
    <link href="http://fengxiu.club/archives/6fbc205f.html"/>
    <id>http://fengxiu.club/archives/6fbc205f.html</id>
    <published>2019-03-10T14:46:00.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是http管道化&quot;&gt;&lt;a href=&quot;#什么是http管道化&quot; class=&quot;headerlink&quot; title=&quot;什么是http管道化&quot;&gt;&lt;/a&gt;什么是http管道化&lt;/h2&gt;&lt;p&gt;pipeline机制是在&lt;strong&gt;一条connection&lt;/strong&gt;上多个http request不需要等待response就可以连续发送的技术。之前的request请求需要等待response返回后才能发起下一个request，而pipeline则废除了这项限制，新的request可以不必等待之前request的response返回就可以立即发送：&lt;/p&gt;
&lt;p&gt;采用管道和不采用管道的请求如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/fengxiu/img/pasted-219.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上图中可以看出，在使用pipeline机制后，客户端无需等待上一个资源返回后就可以在同一条连接上申请下一个资源。由此可见pipeline技术可以提高每条connection的使用效率，在理想情况下，所有资源的获取仅仅需要一个RTT时长（Round Trip Time），而非pipeline的情况下，所有资源获取需要N个RTT时长（N表示资源个数）。&lt;/p&gt;
&lt;p&gt;在理想情况下，所有资源的获取仅仅需要一个RTT时长，这看上去是非常大的优化和诱惑，但为何主流浏览器上默认下该功能都是关闭状态呢？答案只有一个：&lt;a href=&quot;http://link.zhihu.com/?target=https://en.wikipedia.org/wiki/Head-of-line_blocking&quot;&gt;队头阻塞&lt;/a&gt;。我们上面仅看到了client端可以不必等待上一个response返回即可发送下一个request，但在server端必须根据收到的request的顺序来返回response，这个是因为HTTP是一个无状态的协议，每条request无法知道哪条response是返回给他的。&lt;/p&gt;
&lt;p&gt;管道化的表现可以大大提高页面加载的速度，尤其是在高延迟连接中。 管道化同样也可以减少tcp&amp;#x2F;ip的数据包。通常MSS的大小是在536-1460字节，所以将许多个http请求放在一个tcp&amp;#x2F;ip包 里也是有可能的。减少加载一个网页所需数据包的数量可以在整体上对网络有益处，因为数据包越少，路由器和网络带来的负担就越少。 HTTP&amp;#x2F;1.1需要服务器也支持管道化。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="http" scheme="http://fengxiu.club/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>HTTP Keep-Alive</title>
    <link href="http://fengxiu.club/archives/37f5aa4d.html"/>
    <id>http://fengxiu.club/archives/37f5aa4d.html</id>
    <published>2019-03-10T22:46:00.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;HTTP-Keep-Alive是什么？如何工作？&quot;&gt;&lt;a href=&quot;#HTTP-Keep-Alive是什么？如何工作？&quot; class=&quot;headerlink&quot; title=&quot;HTTP Keep-Alive是什么？如何工作？&quot;&gt;&lt;/a&gt;HTTP Keep-Alive是什么？如何工作？&lt;/h1&gt;&lt;p&gt;在http早期，每个http请求都要求打开一个tpc socket连接，并且使用一次之后就断开这个tcp连接。使用keep-alive可以改善这种状态，即在一次TCP连接中可以持续发送多份数据而不会断开连接。通过使用keep-alive机制，可以减少tcp连接建立次数，也意味着可以减少TIME_WAIT状态连接，以此提高性能和提高http服务器的吞吐率(更少的tcp连接意味着更少的系统内核调用,socket的accept()和close()调用)。&lt;/p&gt;
&lt;p&gt;但是，&lt;a href=&quot;http://www.nowamagic.net/academy/tag/keep-alive&quot;&gt;keep-alive&lt;/a&gt;并不是免费的午餐,长时间的tcp连接容易导致系统资源无效占用。配置不当的keep-alive，有时比重复利用连接带来的损失还更大。所以，正确地设置keep-alive timeout时间非常重要。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="http" scheme="http://fengxiu.club/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Http值传输编码(Transfer-Encoding)</title>
    <link href="http://fengxiu.club/archives/ce94709.html"/>
    <id>http://fengxiu.club/archives/ce94709.html</id>
    <published>2019-04-18T22:56:16.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文主要讨论HTTP协议中的&lt;strong&gt;Transfer-Encoding&lt;/strong&gt;。Transfer-Encoding，是一个 HTTP 头部字段，字面意思是「传输编码」。实际上，HTTP协议中还有另外一个头部与编码有关：Content-Encoding（内容编码）。Content-Encoding通常用于对实体内容进行压缩编码，目的是优化传输，例如用gzip压缩文本文件，能大幅减小体积。内容编码通常是选择性的，例如&lt;code&gt;jpg/png&lt;/code&gt;这类文件一般不开启，因为图片格式已经是高度压缩过的，再压一遍没什么效果不说还浪费CPU。&lt;/p&gt;
&lt;p&gt;而Transfer-Encoding则是用来改变报文格式(这个可能你现在还不理解，先看后面)，它不但不会减少实体内容传输大小，甚至还会使传输变大，那它的作用是什么呢？本文接下来主要就是讲这个。我们先记住一点，Content-Encoding和Transfer-Encoding二者是相辅相成的，对于一个HTTP报文，很可能同时进行了内容编码和传输编码。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="Transfer-Encoding" scheme="http://fengxiu.club/tags/Transfer-Encoding/"/>
    
  </entry>
  
  <entry>
    <title>Http协议中的Content-Encoding</title>
    <link href="http://fengxiu.club/archives/e20a716d.html"/>
    <id>http://fengxiu.club/archives/e20a716d.html</id>
    <published>2019-04-18T22:46:30.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;和&lt;code&gt;Content-Encoding&lt;/code&gt;是HTTP中用来对「采用何种编码格式传输正文」进行协定的一对头部字段。它的工作原理是这样：浏览器发送请求时，通过Accept-Encoding带上自己支持的内容编码格式列表；服务端从中挑选一种用来对正文进行编码，并通过&lt;code&gt;Content-Encoding&lt;/code&gt;响应头指明选定的格式；浏览器拿到响应正文后，依据&lt;code&gt;Content-Encoding&lt;/code&gt;进行解压。当然，服务端也可以返回未压缩的正文，但这种情况不允许返回&lt;code&gt;Content-Encoding&lt;/code&gt;。这个过程就是HTTP的内容编码机制。&lt;/p&gt;
&lt;p&gt;内容编码目的是优化传输内容大小，通俗地讲就是进行压缩。一般经过gzip压缩过的文本响应，只有原始大小的1&amp;#x2F;4。对于文本类响应是否开启了内容压缩，是我们做性能优化时首先要检查的重要项目；而对于&lt;code&gt;JPG/PNG&lt;/code&gt;这类本身已经高度压缩过的二进制文件，不推荐开启内容压缩，效果微乎其微还浪费CPU。不过谷歌开源了一个新的JPG图片压缩算法&lt;a href=&quot;https://github.com/google/guetzli/&quot;&gt;guetzli&lt;/a&gt;,这个算法只有原来的1&amp;#x2F;3大小，有兴趣可以看一下。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="Content-Encoding" scheme="http://fengxiu.club/tags/Content-Encoding/"/>
    
    <category term="Accept-Encoding" scheme="http://fengxiu.club/tags/Accept-Encoding/"/>
    
    <category term="请求内容压缩" scheme="http://fengxiu.club/tags/%E8%AF%B7%E6%B1%82%E5%86%85%E5%AE%B9%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议简介</title>
    <link href="http://fengxiu.club/archives/41df0a9f.html"/>
    <id>http://fengxiu.club/archives/41df0a9f.html</id>
    <published>2019-03-10T07:25:00.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;HTTP协议简介&quot;&gt;&lt;a href=&quot;#HTTP协议简介&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议简介&quot;&gt;&lt;/a&gt;HTTP协议简介&lt;/h2&gt;&lt;p&gt;HTTP协议是Hyper Text Transfer</summary>
        
      
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="http" scheme="http://fengxiu.club/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Http的演进之路之五</title>
    <link href="http://fengxiu.club/archives/cb0c26ea.html"/>
    <id>http://fengxiu.club/archives/cb0c26ea.html</id>
    <published>2019-03-10T11:23:00.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Http的演进之路之五&quot;&gt;&lt;a href=&quot;#Http的演进之路之五&quot; class=&quot;headerlink&quot; title=&quot;Http的演进之路之五&quot;&gt;&lt;/a&gt;Http的演进之路之五&lt;/h1&gt;&lt;h2 id=&quot;声明，此系列文章转载自lonnieZ-http的演进之路&quot;&gt;&lt;a href=&quot;#声明，此系列文章转载自lonnieZ-http的演进之路&quot; class=&quot;headerlink&quot; title=&quot;声明，此系列文章转载自lonnieZ http的演进之路&quot;&gt;&lt;/a&gt;声明，此系列文章转载自&lt;a href=&quot;https://www.zhihu.com/people/lonniez/activities&quot;&gt;lonnieZ http的演进之路&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;SPDY&quot;&gt;&lt;a href=&quot;#SPDY&quot; class=&quot;headerlink&quot; title=&quot;SPDY&quot;&gt;&lt;/a&gt;&lt;strong&gt;SPDY&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在上面的章节中我们介绍了HTTP协议的一些特点，包括长连接、pipeline、并行连接等。2012年Google推出了SPDY（speedy，翻译为“快速的”）协议，旨在根本上解决HTTP协议中存在的一些问题、提升HTTP的传输效率。而随后诞生的HTTP&amp;#x2F;2也继承了SPDY的很多特性。因此，在介绍HTTP&amp;#x2F;2之前，有必要先简单了解一下SPDY的基本特征。首先，我们看一下SPDY的协议栈。由下图可见，SPDY位于HTTP和SSL之间，它属于应用层协议，当发现对端不支持SPDY的情况下，仍然可以延用HTTP&amp;#x2F;HTTPS协议，因此它可以最大程度的兼容HTTP协议。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="http" scheme="http://fengxiu.club/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Http的演进之路之六</title>
    <link href="http://fengxiu.club/archives/cd15eee9.html"/>
    <id>http://fengxiu.club/archives/cd15eee9.html</id>
    <published>2019-03-10T12:23:00.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Http的演进之路之六&quot;&gt;&lt;a href=&quot;#Http的演进之路之六&quot; class=&quot;headerlink&quot; title=&quot;Http的演进之路之六&quot;&gt;&lt;/a&gt;Http的演进之路之六&lt;/h1&gt;&lt;h2 id=&quot;声明，此系列文章转载自lonnieZ-http的演进之路&quot;&gt;&lt;a href=&quot;#声明，此系列文章转载自lonnieZ-http的演进之路&quot; class=&quot;headerlink&quot; title=&quot;声明，此系列文章转载自lonnieZ http的演进之路&quot;&gt;&lt;/a&gt;声明，此系列文章转载自&lt;a href=&quot;https://www.zhihu.com/people/lonniez/activities&quot;&gt;lonnieZ http的演进之路&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Http-x2F-2&quot;&gt;&lt;a href=&quot;#Http-x2F-2&quot; class=&quot;headerlink&quot; title=&quot;Http&amp;#x2F;2&quot;&gt;&lt;/a&gt;&lt;strong&gt;Http&amp;#x2F;2&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;鉴于SPDY的成功，HTTP&amp;#x2F;2的开发计划也呼之欲出并且众望所归的采用了SPDY作为整个方案的蓝图进行开发。由&lt;a href=&quot;http://link.zhihu.com/?target=https://www.ietf.org/&quot;&gt;IETF&lt;/a&gt;推动，Google等公司重点参与并于2015年3月公布了&lt;a href=&quot;http://link.zhihu.com/?target=http://http2.github.io/http2-spec/&quot;&gt;草案&lt;/a&gt;。其最终RFC可以参考&lt;a href=&quot;http://link.zhihu.com/?target=https://tools.ietf.org/html/rfc7540&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/fengxiu/img/pasted-266.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="http" scheme="http://fengxiu.club/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>跨域资源共享(CORS)</title>
    <link href="http://fengxiu.club/archives/f1718313.html"/>
    <id>http://fengxiu.club/archives/f1718313.html</id>
    <published>2019-04-29T14:54:01.000Z</published>
    <updated>2023-03-06T15:46:16.907Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;跨域资源共享(CORS)是一种机制，它使用额外的HTTP头来告诉浏览器让运行在一个origin(domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域HTTP请求。&lt;/p&gt;
&lt;p&gt;比如，站点&lt;a href=&quot;&quot;&gt;http://domain-a.com&lt;/a&gt;的某HTML页面通过&lt;code&gt;img&lt;/code&gt;的src请求&lt;a href=&quot;&quot;&gt;http://domain-b.com/image.jpg&lt;/a&gt;。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。&lt;/p&gt;
&lt;p&gt;出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。 例如，XMLHttpRequest和Fetch API遵循同源策略。这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="跨域资源共享" scheme="http://fengxiu.club/tags/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/"/>
    
    <category term="cors" scheme="http://fengxiu.club/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>inux 查看文件命令</title>
    <link href="http://fengxiu.club/archives/b4c41cf9.html"/>
    <id>http://fengxiu.club/archives/b4c41cf9.html</id>
    <published>2021-07-28T10:09:53.000Z</published>
    <updated>2023-03-06T15:46:16.903Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;linux-查看文件命令&quot;&gt;&lt;a href=&quot;#linux-查看文件命令&quot; class=&quot;headerlink&quot; title=&quot;linux 查看文件命令&quot;&gt;&lt;/a&gt;linux 查看文件命令&lt;/h1&gt;&lt;p&gt;当我们在进行调试的时候，经常需要查看各种日志文件，这时候熟悉linux下一些常用的查看文件命令是非常重要的，本篇文章专门整理了这些常用的命令，主要有下面几个。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tail&lt;/li&gt;
&lt;li&gt;cat&lt;/li&gt;
&lt;li&gt;more&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;tail命令&quot;&gt;&lt;a href=&quot;#tail命令&quot; class=&quot;headerlink&quot; title=&quot;tail命令&quot;&gt;&lt;/a&gt;tail命令&lt;/h2&gt;&lt;p&gt;ltail命令用途是依照要求将指定的文件的最后部分输出到标准设备，通常是终端，通俗讲来，就是把某个文件的最后几行显示到终端上，假设该文件有更新，tail会自己主动刷新，确保你看到最新的文件内容。&lt;/p&gt;
&lt;h3 id=&quot;tail命令语法&quot;&gt;&lt;a href=&quot;#tail命令语法&quot; class=&quot;headerlink&quot; title=&quot;tail命令语法&quot;&gt;&lt;/a&gt;tail命令语法&lt;/h3&gt;&lt;p&gt;tail [ -f ] [ -c Number | -n Number | -m Number | -b Number | -k Number ]  [-r]  [ File ]&lt;/p&gt;
&lt;p&gt;参数解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-f 该参数用于监视File文件动态增长。&lt;/li&gt;
&lt;li&gt;-c Number 从 Number 字节位置读取指定文件&lt;/li&gt;
&lt;li&gt;-n Number 从 Number 行位置读取指定文件。&lt;/li&gt;
&lt;li&gt;-m Number 从 Number 多字节字符位置读取指定文件，比方你的文件假设包括中文字，假设指定-c参数，可能导致截断，但使用-m则会避免该问题。&lt;/li&gt;
&lt;li&gt;-b Number 从 Number 表示的512字节块位置读取指定文件。&lt;/li&gt;
&lt;li&gt;-k Number 从 Number 表示的1KB块位置读取指定文件。&lt;/li&gt;
&lt;li&gt;-r 这个会似的按照现实内容相反的顺序现实，具体见下面例子 &lt;/li&gt;
&lt;li&gt;File 指定操作的目标文件名称&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述命令中，都涉及到number，假设不指定，默认显示10行。Number前面可使用正负号，表示该偏移从顶部还是从尾部开始计算。这个具体看下面例子。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://fengxiu.club/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu安装字体</title>
    <link href="http://fengxiu.club/archives/dd3a9eb3.html"/>
    <id>http://fengxiu.club/archives/dd3a9eb3.html</id>
    <published>2019-05-14T15:51:23.000Z</published>
    <updated>2023-03-06T15:46:16.903Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近在学习使用latex，需要一些windows下面特有的字体，因此需要安装这些字体到ubuntu下面。本篇文章将主要记录我在ubuntu中安装windows中的字体过程。也适用于安装其他的字体。另外这个安装过程适用于以Debian为基础的系统。&lt;/p&gt;
&lt;!--</summary>
        
      
    
    
    
    <category term="linux" scheme="http://fengxiu.club/categories/linux/"/>
    
    
    <category term="字体" scheme="http://fengxiu.club/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>location的作用</title>
    <link href="http://fengxiu.club/archives/764b901a.html"/>
    <id>http://fengxiu.club/archives/764b901a.html</id>
    <published>2019-03-09T12:33:00.000Z</published>
    <updated>2023-03-06T15:46:16.903Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;location的作用&quot;&gt;&lt;a href=&quot;#location的作用&quot; class=&quot;headerlink&quot; title=&quot;location的作用&quot;&gt;&lt;/a&gt;location的作用&lt;/h2&gt;&lt;p&gt;location指令的作用是根据用户请求URI来执行不同的应用，location会根据用户请求网站URL进行匹配定位到某个location区块。 如果匹配成功将会处理location块的规则。&lt;/p&gt;
&lt;h2 id=&quot;location的语法规则如下&quot;&gt;&lt;a href=&quot;#location的语法规则如下&quot; class=&quot;headerlink&quot; title=&quot;location的语法规则如下&quot;&gt;&lt;/a&gt;location的语法规则如下&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;location  =     /uri&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ┬      ┬       ┬&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   │      │       │&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   │      │       │&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   │      │       │&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   │      │       │&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   │      │       └─────────────── 前缀|正则&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   │      └──────────────────── 可选的修饰符（用于匹配模式及优先级）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   └───────────────────────── 必须&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="nginx" scheme="http://fengxiu.club/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://fengxiu.club/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx之负载均衡策略总结</title>
    <link href="http://fengxiu.club/archives/2fee60ee.html"/>
    <id>http://fengxiu.club/archives/2fee60ee.html</id>
    <published>2019-04-08T20:25:46.000Z</published>
    <updated>2023-03-06T15:46:16.903Z</updated>
    
    
    <summary type="html">&lt;p&gt;在nginx中，负载均衡策略主要由以下几种，轮询、加权轮询、ip_hash、least_conn、fair和url_hash。下面将分别介绍每一种。&lt;/p&gt;</summary>
    
    
    
    <category term="nginx" scheme="http://fengxiu.club/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://fengxiu.club/tags/nginx/"/>
    
    <category term="upstream" scheme="http://fengxiu.club/tags/upstream/"/>
    
    <category term="负载均衡" scheme="http://fengxiu.club/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>nginx快速入门之配置篇</title>
    <link href="http://fengxiu.club/archives/e5c7e91b.html"/>
    <id>http://fengxiu.club/archives/e5c7e91b.html</id>
    <published>2019-03-09T06:47:00.000Z</published>
    <updated>2023-03-06T15:46:16.903Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;nginx快速入门之配置篇&quot;&gt;&lt;a href=&quot;#nginx快速入门之配置篇&quot; class=&quot;headerlink&quot; title=&quot;nginx快速入门之配置篇&quot;&gt;&lt;/a&gt;nginx快速入门之配置篇&lt;/h1&gt;&lt;h2 id=&quot;nginx-conf-配置结构&quot;&gt;&lt;a href=&quot;#nginx-conf-配置结构&quot; class=&quot;headerlink&quot; title=&quot;nginx.conf 配置结构&quot;&gt;&lt;/a&gt;nginx.conf 配置结构&lt;/h2&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;... &lt;span class=&quot;comment&quot;&gt;#全局块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;events&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;#events块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#http块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... &lt;span class=&quot;comment&quot;&gt;#http全局块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#server块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ... &lt;span class=&quot;comment&quot;&gt;#server全局块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;section&quot;&gt;location&lt;/span&gt; [PATTERN] &lt;span class=&quot;comment&quot;&gt;#location块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;section&quot;&gt;location&lt;/span&gt; [PATTERN] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;section&quot;&gt;server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... &lt;span class=&quot;comment&quot;&gt;#http全局块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="nginx" scheme="http://fengxiu.club/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://fengxiu.club/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>配置虚拟主机</title>
    <link href="http://fengxiu.club/archives/74b15736.html"/>
    <id>http://fengxiu.club/archives/74b15736.html</id>
    <published>2019-03-09T13:21:00.000Z</published>
    <updated>2023-03-06T15:46:16.903Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;配置虚拟主机&quot;&gt;&lt;a href=&quot;#配置虚拟主机&quot; class=&quot;headerlink&quot; title=&quot;配置虚拟主机&quot;&gt;&lt;/a&gt;配置虚拟主机&lt;/h1&gt;&lt;p&gt;本节主要讲解如果使用&lt;strong&gt;nginx配置多个虚拟主机&lt;/strong&gt;,也就是我们通常说的配置域名.接下来我们配置两个域名&lt;code&gt;a.zhangke.com，b.zhangke.com&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="nginx" scheme="http://fengxiu.club/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://fengxiu.club/tags/nginx/"/>
    
  </entry>
  
</feed>
