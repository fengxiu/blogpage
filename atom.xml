<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>枫秀学习日志</title>
  <icon>http://fengxiu.club/icon.png</icon>
  <subtitle>枫秀学习日志</subtitle>
  <link href="http://fengxiu.club/atom.xml" rel="self"/>
  
  <link href="http://fengxiu.club/"/>
  <updated>2022-04-20T01:21:57.806Z</updated>
  <id>http://fengxiu.club/</id>
  
  <author>
    <name>枫秀</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>外观模式</title>
    <link href="http://fengxiu.club/archives/f7de8aa8.html"/>
    <id>http://fengxiu.club/archives/f7de8aa8.html</id>
    <published>2021-08-28T10:09:53.000Z</published>
    <updated>2022-04-20T01:21:57.806Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;p&gt;外观模式是一种结构型设计模式， 能为程序库、 框架或其他复杂类提供一个简单的接口。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;假设你必须在代码中使用某个复杂的库或框架中的众多对象。 正常情况下， 你需要负责所有对象的初始化工作、 管理其依赖关系并按正确的顺序执行方法等。&lt;/p&gt;
&lt;p&gt;最终， 程序中类的业务逻辑将与第三方类的实现细节紧密耦合， 使得理解和维护代码的工作很难进行。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://fengxiu.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://fengxiu.club/archives/f5c535ea.html"/>
    <id>http://fengxiu.club/archives/f5c535ea.html</id>
    <published>2021-08-28T10:09:53.000Z</published>
    <updated>2022-04-20T01:21:57.806Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h1&gt;&lt;p&gt;适配器模式是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。&lt;/p&gt;
&lt;p&gt;在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fengxiu/img/master/problem-zh-2x.png&quot; alt=&quot;problem-zh-2x&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以修改程序库来支持 XML。 但是， 这可能需要修改部分依赖该程序库的现有代码。 甚至还有更糟糕的情况， 你可能根本没有程序库的源代码， 从而无法对其进行修改。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://fengxiu.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>腾讯TEG面经：java实习岗</title>
    <link href="http://fengxiu.club/archives/52bb366.html"/>
    <id>http://fengxiu.club/archives/52bb366.html</id>
    <published>2019-04-02T10:49:22.000Z</published>
    <updated>2022-04-20T01:21:57.806Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下面记录的是我面腾讯TEG事业群的经历&lt;/p&gt;
&lt;h2 id=&quot;腾讯一面-2019年03月13日&quot;&gt;&lt;a href=&quot;#腾讯一面-2019年03月13日&quot; class=&quot;headerlink&quot; title=&quot;腾讯一面 2019年03月13日&quot;&gt;&lt;/a&gt;腾讯一面</summary>
        
      
    
    
    
    <category term="面试" scheme="http://fengxiu.club/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里春招实习面经：java开发</title>
    <link href="http://fengxiu.club/archives/8650cc91.html"/>
    <id>http://fengxiu.club/archives/8650cc91.html</id>
    <published>2019-04-02T11:27:29.000Z</published>
    <updated>2022-04-20T01:21:57.806Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先说一下，你们可能看到我的面经也会觉得很惊奇，为什么其他面经里面出现的问题，我这里几乎都没出现，而且面试流程也走的这么快。下面就看一下我的阿里春招面试奇葩之旅。&lt;/p&gt;
&lt;h2 id=&quot;阿里一面-2019年03月28日&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="面试" scheme="http://fengxiu.club/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Http的演进之路之五</title>
    <link href="http://fengxiu.club/archives/cb0c26ea.html"/>
    <id>http://fengxiu.club/archives/cb0c26ea.html</id>
    <published>2019-03-10T11:23:00.000Z</published>
    <updated>2022-04-20T01:21:57.806Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Http的演进之路之五&quot;&gt;&lt;a href=&quot;#Http的演进之路之五&quot; class=&quot;headerlink&quot; title=&quot;Http的演进之路之五&quot;&gt;&lt;/a&gt;Http的演进之路之五&lt;/h1&gt;&lt;h2 id=&quot;声明，此系列文章转载自lonnieZ-http的演进之路&quot;&gt;&lt;a href=&quot;#声明，此系列文章转载自lonnieZ-http的演进之路&quot; class=&quot;headerlink&quot; title=&quot;声明，此系列文章转载自lonnieZ http的演进之路&quot;&gt;&lt;/a&gt;声明，此系列文章转载自&lt;a href=&quot;https://www.zhihu.com/people/lonniez/activities&quot;&gt;lonnieZ http的演进之路&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;SPDY&quot;&gt;&lt;a href=&quot;#SPDY&quot; class=&quot;headerlink&quot; title=&quot;SPDY&quot;&gt;&lt;/a&gt;&lt;strong&gt;SPDY&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在上面的章节中我们介绍了HTTP协议的一些特点，包括长连接、pipeline、并行连接等。2012年Google推出了SPDY（speedy，翻译为“快速的”）协议，旨在根本上解决HTTP协议中存在的一些问题、提升HTTP的传输效率。而随后诞生的HTTP&amp;#x2F;2也继承了SPDY的很多特性。因此，在介绍HTTP&amp;#x2F;2之前，有必要先简单了解一下SPDY的基本特征。首先，我们看一下SPDY的协议栈。由下图可见，SPDY位于HTTP和SSL之间，它属于应用层协议，当发现对端不支持SPDY的情况下，仍然可以延用HTTP&amp;#x2F;HTTPS协议，因此它可以最大程度的兼容HTTP协议。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="http" scheme="http://fengxiu.club/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Http的演进之路之六</title>
    <link href="http://fengxiu.club/archives/cd15eee9.html"/>
    <id>http://fengxiu.club/archives/cd15eee9.html</id>
    <published>2019-03-10T12:23:00.000Z</published>
    <updated>2022-04-20T01:21:57.806Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Http的演进之路之六&quot;&gt;&lt;a href=&quot;#Http的演进之路之六&quot; class=&quot;headerlink&quot; title=&quot;Http的演进之路之六&quot;&gt;&lt;/a&gt;Http的演进之路之六&lt;/h1&gt;&lt;h2 id=&quot;声明，此系列文章转载自lonnieZ-http的演进之路&quot;&gt;&lt;a href=&quot;#声明，此系列文章转载自lonnieZ-http的演进之路&quot; class=&quot;headerlink&quot; title=&quot;声明，此系列文章转载自lonnieZ http的演进之路&quot;&gt;&lt;/a&gt;声明，此系列文章转载自&lt;a href=&quot;https://www.zhihu.com/people/lonniez/activities&quot;&gt;lonnieZ http的演进之路&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Http-x2F-2&quot;&gt;&lt;a href=&quot;#Http-x2F-2&quot; class=&quot;headerlink&quot; title=&quot;Http&amp;#x2F;2&quot;&gt;&lt;/a&gt;&lt;strong&gt;Http&amp;#x2F;2&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;鉴于SPDY的成功，HTTP&amp;#x2F;2的开发计划也呼之欲出并且众望所归的采用了SPDY作为整个方案的蓝图进行开发。由&lt;a href=&quot;http://link.zhihu.com/?target=https://www.ietf.org/&quot;&gt;IETF&lt;/a&gt;推动，Google等公司重点参与并于2015年3月公布了&lt;a href=&quot;http://link.zhihu.com/?target=http://http2.github.io/http2-spec/&quot;&gt;草案&lt;/a&gt;。其最终RFC可以参考&lt;a href=&quot;http://link.zhihu.com/?target=https://tools.ietf.org/html/rfc7540&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-266.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="http" scheme="http://fengxiu.club/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>跨域资源共享(CORS)</title>
    <link href="http://fengxiu.club/archives/f1718313.html"/>
    <id>http://fengxiu.club/archives/f1718313.html</id>
    <published>2019-04-29T14:54:01.000Z</published>
    <updated>2022-04-20T01:21:57.806Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;跨域资源共享(CORS)是一种机制，它使用额外的HTTP头来告诉浏览器让运行在一个origin(domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域HTTP请求。&lt;/p&gt;
&lt;p&gt;比如，站点&lt;a href=&quot;&quot;&gt;http://domain-a.com&lt;/a&gt;的某HTML页面通过&lt;code&gt;img&lt;/code&gt;的src请求&lt;a href=&quot;&quot;&gt;http://domain-b.com/image.jpg&lt;/a&gt;。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。&lt;/p&gt;
&lt;p&gt;出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。 例如，XMLHttpRequest和Fetch API遵循同源策略。这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="http" scheme="http://fengxiu.club/categories/%E7%BD%91%E7%BB%9C/http/"/>
    
    
    <category term="跨域资源共享" scheme="http://fengxiu.club/tags/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/"/>
    
    <category term="cors" scheme="http://fengxiu.club/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>nginx快速入门之配置篇</title>
    <link href="http://fengxiu.club/archives/e5c7e91b.html"/>
    <id>http://fengxiu.club/archives/e5c7e91b.html</id>
    <published>2019-03-09T06:47:00.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;nginx快速入门之配置篇&quot;&gt;&lt;a href=&quot;#nginx快速入门之配置篇&quot; class=&quot;headerlink&quot; title=&quot;nginx快速入门之配置篇&quot;&gt;&lt;/a&gt;nginx快速入门之配置篇&lt;/h1&gt;&lt;h2 id=&quot;nginx-conf-配置结构&quot;&gt;&lt;a href=&quot;#nginx-conf-配置结构&quot; class=&quot;headerlink&quot; title=&quot;nginx.conf 配置结构&quot;&gt;&lt;/a&gt;nginx.conf 配置结构&lt;/h2&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;... &lt;span class=&quot;comment&quot;&gt;#全局块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;events&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;#events块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#http块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... &lt;span class=&quot;comment&quot;&gt;#http全局块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#server块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ... &lt;span class=&quot;comment&quot;&gt;#server全局块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;section&quot;&gt;location&lt;/span&gt; [PATTERN] &lt;span class=&quot;comment&quot;&gt;#location块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;section&quot;&gt;location&lt;/span&gt; [PATTERN] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;section&quot;&gt;server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... &lt;span class=&quot;comment&quot;&gt;#http全局块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="nginx" scheme="http://fengxiu.club/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://fengxiu.club/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>配置虚拟主机</title>
    <link href="http://fengxiu.club/archives/74b15736.html"/>
    <id>http://fengxiu.club/archives/74b15736.html</id>
    <published>2019-03-09T13:21:00.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;配置虚拟主机&quot;&gt;&lt;a href=&quot;#配置虚拟主机&quot; class=&quot;headerlink&quot; title=&quot;配置虚拟主机&quot;&gt;&lt;/a&gt;配置虚拟主机&lt;/h1&gt;&lt;p&gt;本节主要讲解如果使用&lt;strong&gt;nginx配置多个虚拟主机&lt;/strong&gt;,也就是我们通常说的配置域名.接下来我们配置两个域名&lt;code&gt;a.zhangke.com，b.zhangke.com&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="nginx" scheme="http://fengxiu.club/categories/nginx/"/>
    
    
    <category term="nginx" scheme="http://fengxiu.club/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>latex之插入图片</title>
    <link href="http://fengxiu.club/archives/cd65b57.html"/>
    <id>http://fengxiu.club/archives/cd65b57.html</id>
    <published>2019-12-26T09:08:11.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;!--  TODO:添加latex图片使用   </summary>
        
      
    
    
    
    <category term="tex" scheme="http://fengxiu.club/categories/tex/"/>
    
    
  </entry>
  
  <entry>
    <title>latex之列表使用</title>
    <link href="http://fengxiu.club/archives/dd2855a.html"/>
    <id>http://fengxiu.club/archives/dd2855a.html</id>
    <published>2019-12-26T09:08:11.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;p&gt;列表就是将所要表达的内容分为若干个条目并按一定的顺序排列，达到简明、直观的效果。在论文的写作中会经常使用到列表。LaTeX 中常见的列表环境有 enumerate、itemize 和description。这三种列表环境的主要区别是列表项标签的不同。&lt;/p&gt;</summary>
    
    
    
    <category term="tex" scheme="http://fengxiu.club/categories/tex/"/>
    
    
  </entry>
  
  <entry>
    <title>字体</title>
    <link href="http://fengxiu.club/archives/5a8a6c8d.html"/>
    <id>http://fengxiu.club/archives/5a8a6c8d.html</id>
    <published>2020-03-31T04:30:35.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;!-- TODO添加字体 --&gt;
&lt;p&gt;TTF（TrueType Font）是Apple公司和Microsoft公司共同推出的字体文件格式，随着windows的流行，已经变成最常用的一种字体文件表示方式。&lt;br&gt;而OTF（OpenType Font）是 TTF 的升级版，而</summary>
        
      
    
    
    
    <category term="tex" scheme="http://fengxiu.club/categories/tex/"/>
    
    
    <category term="字体" scheme="http://fengxiu.club/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>一致性hash</title>
    <link href="http://fengxiu.club/archives/5cd14851.html"/>
    <id>http://fengxiu.club/archives/5cd14851.html</id>
    <published>2019-03-11T02:40:00.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;一致性hash&quot;&gt;&lt;a href=&quot;#一致性hash&quot; class=&quot;headerlink&quot; title=&quot;一致性hash&quot;&gt;&lt;/a&gt;一致性hash&lt;/h1&gt;&lt;p&gt;首先我们通过一个例子看看普通的hash算法在应用中有哪些不足，最后来讲解本文重点要讲解的问题，一致性hash。&lt;/p&gt;
&lt;p&gt;我们在使用Redis的时候，为了保证Redis的高可用，提高Redis的读写性能，最简单的方式我们会做主从复制，组成Master-Master或者Master-Slave的形式，或者搭建Redis集群，进行数据的读写分离，类似于数据库的主从复制和读写分离。如下所示：&lt;/p&gt;</summary>
    
    
    
    <category term="分布式" scheme="http://fengxiu.club/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="hash" scheme="http://fengxiu.club/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>数据库和缓存双写一致性方案简介</title>
    <link href="http://fengxiu.club/archives/dc527cae.html"/>
    <id>http://fengxiu.club/archives/dc527cae.html</id>
    <published>2019-04-03T16:45:55.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇文章主要先介绍几种数据库和缓存双写一致性的方案并分析其中的优缺点，最后讲解一下网上经常出现的一些关于这方面的名词。&lt;/p&gt;
&lt;h2 id=&quot;更新策略&quot;&gt;&lt;a href=&quot;#更新策略&quot; class=&quot;headerlink&quot; title=&quot;更新策略&quot;&gt;&lt;/a&gt;更新策略&lt;/h2&gt;&lt;p&gt;首先，缓存由于其高并发和高性能的特性，已经在项目中被广泛使用。在读取缓存方面，都是按照下图的流程来进行业务操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/o_getkeyflow.png&quot; alt=&quot;o_getkeyflow&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="分布式" scheme="http://fengxiu.club/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="数据库" scheme="http://fengxiu.club/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="缓存" scheme="http://fengxiu.club/tags/%E7%BC%93%E5%AD%98/"/>
    
    <category term="一致性方案" scheme="http://fengxiu.club/tags/%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>IO模型：阻塞、非阻塞、同步和异步之间的区别</title>
    <link href="http://fengxiu.club/archives/aeafbee0.html"/>
    <id>http://fengxiu.club/archives/aeafbee0.html</id>
    <published>2019-03-22T23:04:13.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在Unix系统中，主要有以下5种IO模型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞式IO&lt;/li&gt;
&lt;li&gt;非阻塞式IO&lt;/li&gt;
&lt;li&gt;IO复用&lt;/li&gt;
&lt;li&gt;信号量式驱动IO&lt;/li&gt;
&lt;li&gt;异步IO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本篇文章主要是想弄明白阻塞和非阻塞、同步与异步之间的区别，因此信号量式驱动IO本篇文章不会涉及，如果以后我用到的话，会在来补充。&lt;/p&gt;
&lt;p&gt;对于一个network IO (这里我们以read举例)，它会涉及到两个系统对象，一个是调用这个IO的process (or thread)，另一个就是系统内核(kernel)。当一个read操作发生时，它会经历两个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;等待数据准备 (Waiting for the data to be ready)&lt;/li&gt;
&lt;li&gt;将数据从内核拷贝到进程中 (Copying the data from the kernel&lt;br&gt; to the process)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记住这两点很重要，因为这些IO Model的区别就是在两个阶段上各有不同的情况。下面首先介绍每种IO模型，然后在来总结他们之间的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://fengxiu.club/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="http://fengxiu.club/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>cpu cache结构和缓存一致性(MESI协议)</title>
    <link href="http://fengxiu.club/archives/257afb79.html"/>
    <id>http://fengxiu.club/archives/257afb79.html</id>
    <published>2019-04-02T09:42:46.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;cache简介&quot;&gt;&lt;a href=&quot;#cache简介&quot; class=&quot;headerlink&quot; title=&quot;cache简介&quot;&gt;&lt;/a&gt;cache简介&lt;/h2&gt;&lt;p&gt;CPU缓存（Cache Memory）是位于CPU与内存之间的临时存储器，它的容量比内存小的多但是交换速度却比内存要快得多。高速缓存的出现主要是为了解决CPU运算速度与内存读写速度不匹配的矛盾，因为CPU运算速度要比内存读写速度快很多，这样会使CPU花费很长时间等待数据到来或把数据写入内存。在缓存中的数据是内存中的一小部分，但这一小部分是短时间内CPU即将访问的，当CPU调用大量数据时，就可避开内存直接从缓存中调用，从而加快读取速度。&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://fengxiu.club/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="cache" scheme="http://fengxiu.club/tags/cache/"/>
    
    <category term="缓存一致性" scheme="http://fengxiu.club/tags/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>虚拟内存</title>
    <link href="http://fengxiu.club/archives/f79e4123.html"/>
    <id>http://fengxiu.club/archives/f79e4123.html</id>
    <published>2018-09-21T14:42:00.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;虚拟内存&quot;&gt;&lt;a href=&quot;#虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;虚拟内存&quot;&gt;&lt;/a&gt;虚拟内存&lt;/h1&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;虚拟内存是什么、可以用来做什么&lt;/li&gt;
&lt;li&gt;基本概念介绍&lt;/li&gt;
&lt;li&gt;虚拟内存作为缓存的工具&lt;/li&gt;
&lt;li&gt;虚拟内存作为内存管理的工具&lt;/li&gt;
&lt;li&gt;虚拟内存作为内存保护的工具&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-虚拟内存是什么、功能是什么&quot;&gt;&lt;a href=&quot;#1-虚拟内存是什么、功能是什么&quot; class=&quot;headerlink&quot; title=&quot;1. 虚拟内存是什么、功能是什么&quot;&gt;&lt;/a&gt;1. 虚拟内存是什么、功能是什么&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;虚拟内存是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟内存&lt;/strong&gt;是计算机系统内存管理的一种技术。它使得应用程序认为它拥有连续可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。&lt;/p&gt;
&lt;p&gt;下面是《深入立即操作系统》给出的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了更加有效的管理内存并且少出错，现代操作系统提供了一种对主存的抽象概念，叫做虚拟内存（VM）。虚拟内存是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;并且它成功的主要原因就是它一直在沉默的，自动的工作，换句话说，我们这些做应用的程序员根本不需要干涉它的工作过程，他对应用程序是透明的。&lt;/p&gt;
&lt;p&gt;虚拟内存功能是什么&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它将主存看成是一个存储在磁盘上的地址空间的高速缓存，在主存中只保存活动区域，并根据需要在磁盘和主存之间来回传送数据，通过这种方式，它高效地使用了内存。&lt;/li&gt;
&lt;li&gt;它为每个进程提供了一致的地址空间，从而简化了内存管理。&lt;/li&gt;
&lt;li&gt;它保护了每个进程的地址空间不被其他进程破坏。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://fengxiu.club/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="http://fengxiu.club/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>零拷贝</title>
    <link href="http://fengxiu.club/archives/6ebbfb41.html"/>
    <id>http://fengxiu.club/archives/6ebbfb41.html</id>
    <published>2019-06-11T14:49:58.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.linuxjournal.com/article/6345&quot;&gt;Zero Copy I: User-Mode Perspective&lt;/a&gt;&lt;br&gt;本文解释了Linux的零拷贝作用是什么，为什么它非常有用和在哪些地方可以使用该功能。&lt;/p&gt;
&lt;p&gt;到目前为止，几乎每个人都听说过在Linux下的所谓的零拷贝功能，但我经常遇到对这个主题没有完全理解的人。 正因为如此，我决定写一些文章，深入探讨这件事，希望揭开这个有用的功能。 在本文中，我们从用户应用程序的角度看待零拷贝，因此故意省略了内核级别的详细信息。&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="http://fengxiu.club/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://fengxiu.club/tags/linux/"/>
    
    <category term="零拷贝" scheme="http://fengxiu.club/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池大小设置</title>
    <link href="http://fengxiu.club/archives/8551d0c1.html"/>
    <id>http://fengxiu.club/archives/8551d0c1.html</id>
    <published>2019-08-28T10:09:53.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;p&gt;翻译自&lt;a href=&quot;https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing&quot;&gt;About Pool Sizing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开发人员在配置数据库连接池的时候，经常会犯一些错误。在配置数据库连接池时，需要理解一些可能违反直觉的原则。&lt;br&gt;因此本篇文章主要介绍这些原则。&lt;/p&gt;</summary>
    
    
    
    <category term="数据库" scheme="http://fengxiu.club/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="连接池" scheme="http://fengxiu.club/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>LVS、Nginx及HAProxy工作原理简介</title>
    <link href="http://fengxiu.club/archives/3c2eb649.html"/>
    <id>http://fengxiu.club/archives/3c2eb649.html</id>
    <published>2019-07-20T12:22:32.000Z</published>
    <updated>2022-04-20T01:21:57.802Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;当前大多数的互联网系统都使用了服务器集群技术，集群是将相同服务部署在多台服务器上构成一个集群整体对外提供服务，这些集群可以是 Web 应用服务器集群，也可以是数据库服务器集群，还可以是分布式缓存服务器集群等等。&lt;br&gt;&lt;img src=&quot;/images/640.webp&quot; alt=&quot;640&quot;&gt;&lt;br&gt;在实际应用中，在 Web服务器集群之前总会有一台负载均衡服务器，负载均衡设备的任务就是作为Web 服务器流量的入口，挑选最合适的一台 Web 服务器，将客户端的请求转发给它处理，实现客户端到真实服务端的透明转发。&lt;/p&gt;
&lt;p&gt;最近几年很火的「云计算」以及分布式架构，本质上也是将后端服务器作为计算资源、存储资源，由某台管理服务器封装成一个服务对外提供，客户端不需要关心真正提供服务的是哪台机器，在它看来，就好像它面对的是一台拥有近乎无限能力的服务器，而本质上，真正提供服务的，是后端的集群。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="http://fengxiu.club/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="代理" scheme="http://fengxiu.club/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="负载均衡" scheme="http://fengxiu.club/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
</feed>
